{
    "submitRequestRequest": [
        {
            "receipt": {
                "receiptType": "FiscalInvoice",
                "receiptCurrency": "ZWG", // From "Currency"
                "receiptCounter": 4, // First entry, assumed
                "receiptGlobalNo": 2788, // From Invoice Number (IN-000002786)
                "invoiceNo": "IN-000002811", // Found in PDF
                "buyerData": {
                    "buyerRegisterName": "Central Africa Building Society"
                },
                "receiptDate": "2024-11-11T00:00:00", // Using provided date "23/10/2024"
                "receiptLinesTaxInclusive": true,
                "receiptLines": [
                    {
                        "receiptLineType": "Sale",
                        "receiptLineNo": 1,
                        "receiptLineName": "HDMI CABLE -20M",
                        "receiptLinePrice": 1600.00,
                        "receiptLineQuantity": 1,
                        "receiptLineTotal": 1600.00,
                        "taxPercent": 0, // Placeholder for example; modify if PDF specifies
                        "taxID": 2000003966 // Placeholder for example
                    }
                ],
                "receiptTaxes": [
                    {
                        "taxPercent": 0, // Example percent; check for actual tax rate
                        "taxID": 2000003966, // Placeholder for example
                        "taxAmount": 0, // Example calculation; adjust if data specifies
                        "salesAmountWithTax": 1600.00 // Total with tax included
                    }
                ],
                "receiptPayments": [
                    {
                        "moneyTypeCode": "Cash",
                        "paymentAmount": 1600.00 // Placeholder based on example structure
                    }
                ],
                "receiptTotal": 1600.00, // Total from PDF
                "receiptDeviceSignature": {
                    "hash": "76xNjs8qYKLNb0cc8OuvWhYOqzzCXz7Thm0kSBUtgqk=", // Example data
                    "signature": "ctgeNqc+G5+1zmfQS6oLpC9O+fQzcStbcKUPSSM8IQ8+0Wj7ccACjy+R5s6xQAWkiVnnKmi8aLDwJz2SqsKGD57Zt6QJqqG7TfIxPzZHc73BB9pYt7tsTvSGa3f8SdydmfZHJuiEsZIRw0LbaGzqqnQK5oN4kdRYND6c4aK83SLYp027YgO7bixRED1mhXraYT5Nb2bSFMqKxSxyGa0tmdEfXswfvrIfPTR6pg0aC+Mc8zYEjmB4wtTS12SLbBpyb0JgpvqdAWf9AMccYdZE18Do0HIp+OIcz7HXIUPS24d/fzslyqrbMSje09GknJJDjAK0dj6pxIgkRlN/K9AWWQ==" // Placeholder for digital signature
                }
            }
        }
    ]
}



const newLine = {
    receiptLineType: "Sale",
    receiptLineNo: currentLineNo + 1,
    receiptLineHSCode: "",
    receiptLineName: "",
    receiptLinePrice: 0,
    receiptLineQuantity: 1,
    receiptLineTotal: 0,
    taxPercent: 15,
    taxCode: nextTaxCode.toString(),
    taxID: 1,
};

appendReceiptLine(newLine);

// Automatically add or update a matching tax entry
appendReceiptTax({
    taxCode: newLine.taxCode,
    taxPercent: newLine.taxPercent,
    taxID: newLine.taxID,
    taxAmount: 0,
    salesAmountWithTax: 0, // Will update when total is calculated
});


    {/* Receipt Payments */}
                <h3 className='font-bold text-green-700'>Receipt Payments:</h3>
                {receiptPayments.map((item, index) => (
                    <div key={item.id} className='mb-4'>
                        <div className="flex items-center gap-2">
                            <FormSelect label="Receipt Currency:" name={`receipt.receiptPayments.${index}.moneyTypeCode`}
                                options={[
                                    { value: "Cash", label: "Cash" },
                                    { value: "Card", label: "Card" },
                                    { value: "MobileWallet", label: "MobileWallet" },
                                    { value: "Coupon", label: "Coupon" },
                                    { value: "Credit", label: "Credit" },
                                    { value: "BankTransfer", label: "BankTransfer" },
                                    { value: "Other", label: "Other" },
                                ]}
                                register={register}
                                error={errors.receipt?.receiptPayments?.[index]?.moneyTypeCode}
                            />
                            <FormInput label="Payment Amount:" name={`receipt.receiptPayments.${index}.paymentAmount`} type="number" register={(name: any) => register(name, { setValueAs: (value) => (value === "" ? undefined : Number(value)) })} error={errors.receipt?.receiptPayments?.[index]?.paymentAmount} />
                        </div>
                        <Button
                            type="button"  // Prevents form submission
                            className='bg-red-700 hover:bg-red-500 my-4' onClick={() => removeReceiptPayment(index)}>Remove Payment</Button>
                    </div>
                ))}
                <Button
                    variant={'outline'}
                    type="button"  // Prevents form submission
                    className='w-full text-green-700'
                    onClick={() => appendReceiptPayment({
                        moneyTypeCode: '', paymentAmount: 0,
                    })}>
                    <Plus />
                    <p className="">Add Payment</p>
                </Button>